boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$CO2.Emissions)
#Parallel boxplot.
boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$FUel)
#Parallel boxplot.
boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$Fuel)
#Question 3:
#Import the dataset
datasetQ3 <- read.csv("C:\\Data Science Projects\\Fuel_Cons_2022.csv")
dataframeQ3 <- data.frame(datasetQ3)
summary(dataframeQ3)
#Parallel boxplot.
boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$Fuel.Consumption)
#Parallel boxplot.
boxplot(dataframeQ3$CO2.Emissions, dataframeQ3$Fuel)
#Parallel boxplot.
dataframeQ3$CO2.Emissions <- as.numeric(as.character(dataframeQ3$CO2.Emissions))
boxplot(dataframeQ3$CO2.Emissions, dataframeQ3$Fuel)
boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$Fuel)
boxplot(dataframeQ3$CO2.Emissions ~ dataframeQ3$Fuel, xlab="Fuel type", ylab="CO2 emissions")
hist(dataframeQ3$X.1, dataframeQ3$Transmission == "A8")
hist(dataframeQ3$X.1[dataframeQ3$Transmission == "A8"])
#Histogram creation.
dataframeQ3$X.1 <- as.numeric(as.character(dataframeQ3$X.1))
hist(dataframeQ3$X.1[dataframeQ3$Transmission == "A8"])
hist(dataframeQ3$X.1[dataframeQ3$Transmission == "A8"], xlim = c(6,18), main = "Histogram of combined fuel consumption",
xlab = "Combined fuel consumption (L/km)")
#Create new variables.
dataframeQ3$Cylinders <- as.numeric(as.character(dataframeQ3$Cylinders))
dataframeQ3$Compare <- dataframeQ3$CO2.Emissions/dataframeQ3$Cylinders * 100
barplot(table(dataframeQ3$Compare))
boxplot(dataframeQ3$Compare ~ dataframeQ3$Model)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Make)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Model)
library.packages("psych")
install.packages("psych")
library(psych)
# Question 1
datasetQ1 <- data("ChickWeight", package = "datasets") #Loading the dataset
describeBy(ChickWeight)
install.packages("pastecs")
library(pastecs)
stat.desc(ChickWeight)
# Summary of dataset
summary(ChickWeight)
# Create plots
boxplot(ChickWeight$weight)
barplot(dataframeQ3$Compare ~ dataframeQ3$Make)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Model)
barplot(dataframeQ3$Compare ~ dataframeQ3$Model)
barplot(dataframeQ3$Compare ~ dataframeQ3$Make)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Model)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Make)
# Create plots
boxplot(ChickWeight$weight)
barplot(table(ChickWeight$Time))
barplot(table(ChickWeight$Time),  main="Relationship between time and chick's weight (Diet 1)")
barplot(table(ChickWeight$Time),  main="The number of chicks recorded through time period",
xlab= "Time(days)", ylab= "Number of chicks")
barplot(table(ChickWeight$Chick))
barplot(table(ChickWeight$Chick), main = "The number of days recorded for each chicks",
xlab= "Chick's ID", ylab= "Number of days")
barplot(table(ChickWeight$Diet), main = "The number of records for each diet",
xlab= "Diet", ylab= "Number of records")
barplot(table(ChickWeight$Time),  main="The number of chicks recorded through time period",
xlab= "Time(days)", ylab= "Number of chicks")
barplot(table(ChickWeight$Chick), main = "The number of days recorded for each chicks",
xlab= "Chick's ID", ylab= "Number of days")
barplot(table(ChickWeight$Diet), main = "The number of records for each diet",
xlab= "Diet", ylab= "Number of records")
#Depicting relationship between time and chick's weight, according to diet.
plot(ChickWeight$Time[ChickWeight$Diet==1], ChickWeight$weight[ChickWeight$Diet==1],
main="Relationship between time and chick's weight (Diet 1)",
xlab="Time(days) ", ylab="Chicks' weight(gm) ", pch=19)
plot(ChickWeight$Time[ChickWeight$Diet==2], ChickWeight$weight[ChickWeight$Diet==2],
main="Relationship between time and chick's weight (Diet 2)",
xlab="Time(days) ", ylab="Chicks' weight(gm) ", pch=19)
plot(ChickWeight$Time[ChickWeight$Diet==3], ChickWeight$weight[ChickWeight$Diet==3],
main="Relationship between time and chick's weight (Diet 3)",
xlab="Time(days) ", ylab="Chicks' weight(gm) ", pch=19)
plot(ChickWeight$Time[ChickWeight$Diet==4], ChickWeight$weight[ChickWeight$Diet==4],
main="Relationship between time and chick's weight (Diet 4)",
xlab="Time(days) ", ylab="Chicks' weight(gm) ", pch=19)
# Question 2.
datasetQ2 <- read.csv("C:\\Data Science Projects\\Cleaning.csv")  # Loading the dataset.
datasetQ2_1 <- data.frame(datasetQ2)
str(datasetQ2_1) # Finding structure,
summary(datasetQ2_1)
data("mtcars", package = "datasets")
force(mtcars)
View(mtcars)
?mtcars
max(mtcars$hp[mtcars$am == 0])
max(mtcars$hp[mtcars$am == 1])
library(ggplot2)
ggplot(mtcars, aes(factor(cyl), wt)) + geom_violin(aes(fill = cyl))
ggplot(mtcars, aes(factor(vs), mpg)) + geom_violin(aes(fill = vs))
ggplot(mtcars, aes(factor(am), mpg)) + geom_violin(aes(fill = am))
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(aes(fill = cyl))
ggplot(mtcars,aes(x=mpg, group=am, fill=am)) + geom_density(adjust=1.5)
summary(datasetQ2_1)
# Question 2.
datasetQ2 <- read.csv("C:\\Data Science Projects\\Cleaning.csv")  # Loading the dataset.
datasetQ2_1 <- data.frame(datasetQ2)
# Making character data integer.
datasetQ2_1$Q4 <- as.integer(as.character(datasetQ2_1$Q4))
datasetQ2_1$Q5 <- as.integer(as.character(datasetQ2_1$Q5))
summary(datasetQ2_1)
# Question 2.
datasetQ2 <- read.csv("C:\\Data Science Projects\\Cleaning.csv")  # Loading the dataset.
datasetQ2_1 <- data.frame(datasetQ2)
is.na(datasetQ2_1)
# Making character data integer.
datasetQ2_1$Q4 <- as.integer(as.character(datasetQ2_1$Q4))
datasetQ2_1$Q5 <- as.integer(as.character(datasetQ2_1$Q5))
apply(is.na(datasetQ2_1), 2, which)
# Recode outliers as NA
outlier_1 <- datasetQ2_1$Q5 > 40
datasetQ2_1$Q5[outlier_1] <- NA
outlier_2 <- datasetQ2_1$Q7 > 40
datasetQ2_1$Q7[outlier_2] <- NA
outlier_3 <- datasetQ2_1$Q11 > 40
datasetQ2_1$Q11[outlier_3] <- NA
summary(datasetQ2_1)
# Replace values
datasetQ2_1$Q2[is.na(datasetQ2_1$Q2)] <- median(datasetQ2_1$Q2, na.rm = T)
datasetQ2_1$Q4[is.na(datasetQ2_1$Q4)] <- median(datasetQ2_1$Q4, na.rm = T)
datasetQ2_1$Q5[is.na(datasetQ2_1$Q5)] <- median(datasetQ2_1$Q5, na.rm = T)
datasetQ2_1$Q7[is.na(datasetQ2_1$Q7)] <- median(datasetQ2_1$Q7, na.rm = T)
datasetQ2_1$Q10[is.na(datasetQ2_1$Q10)] <- median(datasetQ2_1$Q10, na.rm = T)
datasetQ2_1$Q11[is.na(datasetQ2_1$Q11)] <- median(datasetQ2_1$Q11, na.rm = T)
datasetQ2_1$Q12[is.na(datasetQ2_1$Q12)] <- median(datasetQ2_1$Q12, na.rm = T)
# Recode outliers as NA
outlier_1 <- datasetQ2_1$Q5 > 40
#Checking result
summary(datasetQ2_1)
#Question 3:
#Import the dataset
datasetQ3 <- read.csv("C:\\Data Science Projects\\Fuel_Cons_2022.csv")
dataframeQ3 <- data.frame(datasetQ3)
summary(dataframeQ3)
str(dataframeQ3)
str(dataframeQ3)
# Frequency table of Fuel_type
table(dataframeQ3$Fuel)
# Frequency table of Fuel_type
table(dataframeQ3$Fuel_type)
# Barplot for Fuel type
barplot(table(dataframeQ3$Fuel_type))
# Barplot for Fuel type
barplot(table(dataframeQ3$Fuel_type), xlab= "Fuel type", ylab = "Number of cars",
main= "Number of cars by fuel type")
mean(dataframeQ3$City_Fuel[dataframeQ3$Cylinders])
mean(dataframeQ3$City_Fuel, grouping(dataframeQ3$Cylinders))
aggregate(x = dataframeQ3$City_Fuel,                # Specify data column
by = list(dataframeQ3$Cylinders),              # Specify group indicator
FUN = mean)
aggregate(x = dataframeQ3$City_Fuel,                # Specify data column
by = list(dataframeQ3$Cylinders),              # Specify group indicator
FUN = std)
aggregate(x = dataframeQ3$City_Fuel,                # Specify data column
by = list(dataframeQ3$Cylinders),              # Specify group indicator
FUN = sd)
#Mean and standard deviation of city fuel by cylinders.
aggregate(x = dataframeQ3$City_Fuel,
by = list(dataframeQ3$Cylinders),
FUN = mean)  #Find mean
aggregate(x = dataframeQ3$City_Fuel,
by = list(dataframeQ3$Cylinders),
FUN = sd)    #Find standard deviation
head(test_data)
test_data <-cbind(obsA = 16:8, obsB = c(20:19, 6:12))
test_data <-cbind(obsA = 16:8, obsB = c(20:19, 6:12))
head(test_data)
dim(test_data)
?apply
apply(test_data, 2, print)
apply(test_data, 2, range)
apply(test_data, 2, summary)
install.packages("mosaic")
library("mosaic")
library("mosaicData")
data("SaratogaHouses", package = "mosaicData")
view(SaratogaHouses)
View(SaratogaHouses)
str(SaratogaHouses)
names(SaratogaHouses)
rm(list = ls())
rm(list = ls()) #clear memory
rm(Setosa)
data("SaratogaHouses", package = "mosaicData")
attach(SaratogaHouses)
?SaratogaHouses
sum(complete.cases(SaratogaHouses))
Saratoga_complete <- SaratogaHouses[complete.cases(SaratogaHouses)]
Saratoga_complete <- SaratogaHouses[complete.cases(SaratogaHouses),]
missing <- nrow(SaratogaHouses)- nrow(Saratoga_complete)
missing
alloutliers <- Saratoga_complete[which(price<landvalue) |(lotSize == 0) |(bathrooms == 0)|(bedroom==0)|(rooms==0)]
alloutliers <- Saratoga_complete[which(price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedroom==0)|(rooms==0)]
alloutliers <- Saratoga_complete[which(price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedrooms==0)|(rooms==0)]
alloutliers <- Saratoga_complete[which((price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedrooms==0)|(rooms==0)),]
?rm
rm(alloutliers)
str(SaratogaHouses)
alloutliers
alloutliers <- Saratoga_complete[which((price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedrooms==0)|(rooms==0)),]
alloutliers
houses <- Saratoga_complete[c(16,702,851,891, 1011, 1494),]
houses
houses <- Saratoga_complete[-c(16,702,851,891, 1011, 1494),]
str(houses)
rm(SaratogaHouses, Saratoga_complete)
View(houses)
View(houses)
attach(houses)
detach(SaratogaHouses)
attach(houses)
detach(houses)
attach(houses)
table(houses$fireplace)
hist(houses$price, col="navy", xlab="House price, in $", main="Histogram of house prices")
barplot(table(fireplaces))
summary(price)
library(pastecs)
stat.desc(price)
attach(SaratogaHouses)
alloutliers <-which((price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedrooms==0)|(rooms==0)),
alloutliers
houses <- Saratoga_complete[-alloutliers,]
Saratoga_complete <- SaratogaHouses[complete.cases(SaratogaHouses),]
houses <- Saratoga_complete[-alloutliers,]
alloutliers <-which((price<landValue) |(lotSize == 0) |(bathrooms == 0)|(bedrooms==0)|(rooms==0))
houses <- Saratoga_complete[-alloutliers,]
# Question 1
data("ChickWeight", package = "datasets") #Loading the dataset
View(ChickWeight)
houses750<-houses[houses$price>=750000,]
houses750
describeBy(houses750$price, houses750$fireplace)
library(psych)
describeBy(houses750$price, houses750$fireplace)
?boxplot
boxplot(price~fireplace, ylim=c(20000,775000))
describeBy(price, fireplace)
describeBy(price, fireplaces)
boxplot(price~fireplaces, ylim=c(20000,775000))
summary(houses)
options(scipen=999)
boxplot(price~fireplaces, ylim=c(20000,775000))
options(scipen=0)
boxplot(price~fireplaces, ylim=c(20000,775000))
describeBy(houses750$price, houses750$fireplace)
describeBy(price, houses$fireplace)
table(houses$fireplace)
houses$fireplace<-ifelse(fireplaces>0,1,0)
houses$fireplaces<-ifelse(fireplaces>0,1,0)
table(houses$fireplace)
houses$fireplaces<-ifelse(houses$fireplace>0,1,0)
options(scipen=9)
boxplot(price~fireplaces, ylim=c(20000,775000))
plot(ChickWeight$Time, ChickWeight$Weight)
#Finding missing values
table(ChickWeight$Chick)
ChickWeight$Chick[18]
ChickWeight(ChickWeight$Chick[18])
View(ChickWeight$weight == 18)
View(ChickWeight$Chhick = 18)
View(ChickWeight$Chick==18)
require(graphics)
coplot(weight ~ Time | Chick, data = ChickWeight,
type = "b", show.given = FALSE)
alloutliers <-which((ChickWeight$Chick == 18) |
(ChickWeight$Chick == 16) |
(ChickWeight$Chick == 15)|
(ChickWeight$Chick == 8)|
(ChickWeight$Chick == 44))
alloutliers
# Question 1
df<- data("ChickWeight", package = "datasets") #Loading the dataset
df1 <- data.frame(df)
View(df1)
View(df1)
#Question 3:
#Import the dataset
datasetQ3 <- read.csv("C:\\Data Science Projects\\Fuel_Cons_2022.csv")
dataframeQ3 <- data.frame(datasetQ3)
#Mean and standard deviation of city fuel by cylinders.
apply(x = dataframeQ3$City_Fuel,
by = list(dataframeQ3$Cylinders),
FUN = mean)  #Find mean
#Mean and standard deviation of city fuel by cylinders.
apply(dataframeQ3$City_Fuel,
by = list(dataframeQ3$Cylinders),
FUN = mean)  #Find mean
#Mean and standard deviation of city fuel by cylinders.
apply(dataframeQ3$City_Fuel,
list(dataframeQ3$Cylinders),
FUN = mean)  #Find mean
#Mean and standard deviation of city fuel by cylinders.
apply(dataframeQ3$City_Fuel,
list(dataframeQ3$Cylinders),mean)  #Find mean
#Mean and standard deviation of city fuel by cylinders.
tapply(dataframeQ3$City_Fuel,
dataframeQ3$Cylinders,mean)  #Find mean
tapply(dataframeQ3$City_Fuel,
dataframeQ3$Cylinders,sd)    #Find standard deviation
# Summary of dataset
summary(ChickWeight)
ChickWeight(ChickWeight$Chick == 18) |
(ChickWeight$Chick == 16) |
(ChickWeight$Chick == 15)|
(ChickWeight$Chick == 8)|
(ChickWeight$Chick == 44))
ChickWeight((ChickWeight$Chick == 18) |
(ChickWeight$Chick == 16) |
(ChickWeight$Chick == 15)|
(ChickWeight$Chick == 8)|
(ChickWeight$Chick == 44))
attach(ChickWeight)
ChickWeight((ChickWeight$Chick == 18) |
(ChickWeight$Chick == 16) |
(ChickWeight$Chick == 15)|
(ChickWeight$Chick == 8)|
(ChickWeight$Chick == 44))
ChickWeight[(ChickWeight$Chick == 18) |
(ChickWeight$Chick == 16) |
(ChickWeight$Chick == 15)|
(ChickWeight$Chick == 8)|
(ChickWeight$Chick == 44)]
detach(ChickWeight)
# Finding records.
data1 <- dataframeQ3[(dataframeQ3$Smog_Rating == 7)& (dataframeQ3$Transmission == "A6")
& (dataframeQ3$Fuel_type == "Z"),]
data1
#Parallel boxplot.
boxplot(dataframeQ3$Emission_co2 ~ dataframeQ3$Fuel_type, xlab="Fuel type", ylab="CO2 emissions")
#Parallel boxplot.
boxplot(dataframeQ3$Emission_co2 ~ dataframeQ3$Fuel_type, xlab="Fuel type", ylab="CO2 emissions (g/km)")
#Histogram creation.
hist(dataframeQ3$Comb_Fuel[dataframeQ3$Transmission == "A8"], xlim = c(6,18),
main = "Histogram of combined fuel consumption",
xlab = "Combined fuel consumption (L/km)")
boxplot(dataframeQ3$Make ~ dataframeQ3$Compare)
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
(dataframeQ3$Make ~ dataframeQ3$Compare)
boxplot(dataframeQ3$Make ~ dataframeQ3$Compare)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Make)
boxplot(dataframeQ3$Compare ~ dataframeQ3$Model)
summary(dataframeQ3)
length(unique(dataframeQ3$Model))
length(unique(dataframeQ3$Make))
#Question 3:
#Import the dataset
datasetQ3 <- read.csv("C:\\Data Science Projects\\Fuel_Cons_2022.csv")
dataframeQ3 <- data.frame(datasetQ3)
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
first_order <- dataframeQ3[order(dataframeQ3$Compare), 5]
first_order
first_order <- dataframeQ3[order(dataframeQ3$Compare)]
first_order <- dataframeQ3[order(dataframeQ3$Compare),]
first_order
head(first_order, 5)
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
first_order <- dataframeQ3[order(dataframeQ3$Compare),1]
head(first_order, 5)
first_order <- dataframeQ3$Make[order(dataframeQ3$Compare),]
first_order <- dataframeQ3[order(dataframeQ3$Compare),]
head(first_order, 5)
# Finding the best model to reduce emission.
model_order <- dataframeQ3[order(dataframeQ3$Compare),]
head(model_order, 5)
describe(dataframeQ3$Make)
summary(dataframeQ3$Make)
describe.by(dataframeQ3$Make, dataframeQ3$Compare)
describe.by(dataframeQ3, dataframeQ3$Make)
(psych)
install.packages("psych")
library(psych)
describe.by(dataframeQ3, dataframeQ3$Make)
describeBy(dataframeQ3, dataframeQ3$Make)
describeBy(dataframeQ3, dataframeQ3$Make, dataframeQ3$Compare)
describe(dataframeQ3, dataframeQ3$Make)
describe(dataframeQ3, dataframeQ3$Make, na.rm = T)
install.packages("nycflights13")
data(package="nycflights13")
rm(list=ls())
data(flights,package="nycflights13")
attach(flights)
head(flights)
str(flights)
?is.na
sum(is.na(flights$year))
sum(is.na(flights$month))
sum(is.na(flights$year))
sum(is.na(flights$day))
sum(is.na(flights$dep_time))
sum(is.na(flights$sched_dep_time))
sum(is.na(flights$dep_delay))
sum(is.na(flights$arr_time))
sum(is.na(flights$sched_dep_time))
sum(is.na(flights$arr_delay))
?apply
apply(is.na(flights), 2, sum)
apply(is.na(flights), 1, sum)
head(flights[is.na(flights$dep_time),])
?which
?which
which(is.na(flights$dep_time))
flight1 <- flights[-which(is.na(flights$dep_time)),]
dim(flight1)
data1<-flights[!is.na(flights$dep_time),]
dim(data1)
hist(flight1$dep_delay)
flight1$delay_type[flight1$dep_delay < 60]<- "short"
flight1$delay_type[flight1$dep_delay >= 60 & flight1$dep_delay < 120]<- "medium"
flight1$delay_type[flight1$dep_delay >= 120 & flight1$dep_delay < 240]<- "long"
flight1$delay_type[flight1$dep_delay >= 240]<- "significant"
table(flight1$delay_type)
dim(flight1)[1]
percentages<-100*table(flight1$delay_type)/dim(flight1)[1]
percentages
hist(flight1$dep_delay/60, main="Histogram for Dept_Delay in hours")
flight2<-flight1[flight1$delay_type!="short",]
table(flight2$delay_type)
barplot(carriers_delay)
carriers_delay<- 100* table(flight2$carrier)/nrow(flight2)
(carriers_delay)
carrier_poor_perf <- carriers_delay[carriers_delay >5]
barplot(carrier_poor_perf, col="steelblue",  ylab="Percentage of delayed flights", xlab="Carrier")
carrier_poor_perf <- carriers_delay[carriers_delay >5]
barplot(carriers_delay)
barplot(carrier_poor_perf, col="steelblue",  ylab="Percentage of delayed flights", xlab="Carrier")
barplot(carriers_delay,col="steelblue", ylim=c(0,30), ylab="Percentage of delayed flights", xlab="Carrier")
barplot(carriers_delay,col="steelblue", ylim=c(0,30), ylab="Percentage of delayed flights", xlab="Carrier")
barplot(100* table(flight2$month)/nrow(flight2),col="steelblue" , ylab="Percentage of delayed flights", xlab="Month")
barplot(100* table(flight2$hour)/nrow(flight2),col="steelblue" , ylab="Percentage of delayed flights", xlab="hour")
()
getwd()
setwd("C:/Data Science Projects/R file Statistical Computing")
setwd("C:/Data Science Projects/R files Statistical Computing")
getwd()
tea_3 <- read_sav("C:/Data Science Projects/R files Statistical Computing/Tea_Makes_You_Brainy.sav")
library(haven)
tea_3 <- read_sav("C:/Data Science Projects/R files Statistical Computing/Tea_Makes_You_Brainy.sav")
head(tea_3)
dim(tea_3)
data2 <- read.csv(file.choose(), header = T)
head(data2)
write.csv(data2, file="iris2.csv")
getwd()
#Question 3:
#Import the dataset
datasetQ3 <- read.csv("C:\\Data Science Projects\\Fuel_Cons_2022.csv")
dataframeQ3 <- data.frame(datasetQ3)
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
# Finding the best model to reduce emission.
barplot(dataframeQ3$Compare,col="steelblue" , ylab="Percentage of delayed flights", xlab="Month")
# Finding the best model to reduce emission.
model_order <- dataframeQ3[order(dataframeQ3$Compare),]
head(model_order, 5)
make_order <- dataframeQ3[order(dataframeQ3$Compare), 1]
make_order
model_order
library(psych)
describe(dataframeQ3, dataframeQ3$Make)
describe(dataframeQ3, dataframeQ3$Make, na.rm-T)
describe(dataframeQ3, dataframeQ3$Make, na.rm=T)
#Parallel boxplot.
boxplot(dataframeQ3$Emission_co2 ~ dataframeQ3$Fuel_type, xlab="Fuel type", ylab="CO2 emissions (g/km)")
#Histogram creation.
hist(dataframeQ3$Comb_Fuel[dataframeQ3$Transmission == "A8"], xlim = c(6,18),
main = "Histogram of combined fuel consumption",
xlab = "Combined fuel consumption (L/km)")
#Histogram creation.
hist(dataframeQ3$Comb_Fuel[dataframeQ3$Transmission == "A8"], xlim = c(6,18),
main = "Histogram of combined fuel consumption",
xlab = "Combined fuel consumption (L/km)")
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
#Parallel boxplot.
boxplot(dataframeQ3$Emission_co2 ~ dataframeQ3$Fuel_type, xlab="Fuel type", ylab="CO2 emissions (g/km)")
#Histogram creation.
hist(dataframeQ3$Comb_Fuel[dataframeQ3$Transmission == "A8"], xlim = c(6,18),
main = "Histogram of combined fuel consumption",
xlab = "Combined fuel consumption (L/km)")
#Create new variables.
dataframeQ3$Compare <- dataframeQ3$Emission_co2/dataframeQ3$Cylinders * 100
describe(dataframeQ3, dataframeQ3$Make)
describe(dataframeQ3$Make, dataframeQ3$Compare)
(dataframeQ3$Make,mean(dataframeQ3$Compare))
z<-with(dataframeQ3$Make,mean(dataframeQ3$Compare))
describe(dataframeQ3$Make)
describe(dataframeQ3$Compare)
describe(dataframeQ3$Compare, dataframeQ3$Make)
summary(dataframeQ3$Make)
summary(dataframeQ3.Make)
aggregate(dataframeQ3$Compare, list(dataframeQ3$Make), FUN=mean)
make_order <- data1[order(data1$x)]
data1 <- aggregate(dataframeQ3$Compare, list(dataframeQ3$Make), FUN=mean)
make_order <- data1[order(data1$x)]
make_order <- data1[order(data1[2])]
data1 <- data.frame(data1)
make_order <- data1[order(data1[2])]
data1
data1$x
make_order <- data1[order(data1[2]),]
make_order <- data1[order(data1$x),]
head(make_order)
